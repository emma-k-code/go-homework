1. 什麼是heap ? 什麼是stack ？
	stack: 
		靜態記憶體配置，存放區域變數、函式的參數與函式的位址等，個數、大小必須在編譯時期就都已知。
		特性為「後進先出」，由系統管理，
	heap: 
		動態記憶體配置。是一種保留一塊可用的記憶體，讓程式可方便配置所需的資料。
		主要用在編譯時期還不知道大小或個數的變數。
		例如，陣列的大小是由使用者決定，就必須用動態配置。記憶體由使用者進行回收。

2. queue 的儲存方式屬於heap 還是stack?
	heap。
	因為 queue 為「先進先出」的機制，heap 才有辦法實作該機制。

3. 說明heap 和stack 記憶體的回收機制	
	stack: 
		特性為「後進先出」，會從最後產生的開始進行回收，記憶體由系統自動產生與回收。
	heap: 
		因為是動態配置記憶體位置，所以其存活時間不規律且不可預期，即使 function 執行完畢，資料仍可能存在 heap 中，
		此時如果程式沒有「垃圾回收(Garbage Collection)」機制，就必須由使用者自行進行回收。
